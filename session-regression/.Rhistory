6  14 85
7  16 66
8  16 79
9  18 77
10 19 91
> # prediction
> new.df <- data.frame(x=x)
> predict(reg, my.data)
1        2        3        4        5        6        7        8        9       10
84.15094 71.43396 68.25472 77.79245 80.97170 74.61321 80.97170 80.97170 87.33019 90.50943
> # y - y.hat
> sum(y-pred(reg(my.data)))
Error in pred(reg(my.data)) : could not find function "pred"
> # y - y.hat
> sum(y-predict(reg(my.data)))
Error in reg(my.data) : could not find function "reg"
> # y - y.hat
> sum(y-predict(reg, my.data)))
Error: unexpected ')' in "sum(y-predict(reg, my.data)))"
> # y - y.hat
> sum(y-predict(reg, my.data))
[1] 3.410605e-13
> RSS=sum((y-predict(reg, my.data))^2)
> RSS
[1] 777.5377
> RSE=sqrt(RSS/8)
> RSE
[1] 9.858611
> SE=RSE/(sum((x-mean(x))^2))
> SE
[1] 0.2325144
> sqrt(SE)
[1] 0.4821975
> summary(reg)
Call:
lm(formula = y ~ x, data = my.data)
Residuals:
Min      1Q  Median      3Q     Max
-14.972  -7.434   1.028   7.939  12.028
Coefficients:
Estimate Std. Error t value Pr(>|t|)
(Intercept)   30.104     23.824   1.264    0.242
x              3.179      1.514   2.100    0.069 .
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Residual standard error: 9.859 on 8 degrees of freedom
Multiple R-squared:  0.3553,	Adjusted R-squared:  0.2747
F-statistic: 4.409 on 1 and 8 DF,  p-value: 0.06895
> beta.0=30.104
> beta.hat=30.104
> alfa.hat=3.179
> RSS=sum((y - beta.hat - alfa.hat*x)^2)
> RSS
[1] 777.5379
> length(x)
[1] 10
> RSE=sqrt(RSS/(length(x-2)))
> RSE
[1] 8.817811
> length(x-2)
[1] 10
> RSE=sqrt(RSS/(length(x)-2))
> RSE
[1] 9.858612
> (length(x)-2)
[1] 8
> var=RSE
> SE=RSE/(sum((x-mean(x))^2))
> sqrt(SE)
[1] 0.4821975
> RSS=sum((y - beta.hat - alfa.hat*x)^2)
> RSS
[1] 777.5379
> RSE=sqrt(RSS/(length(x)-2))
> n=10
> RSE*(1/n + (mean(x)^2)/(sum((x-mean(x)^2))))
[1] -0.06752474
> summary(reg)
Call:
lm(formula = y ~ x, data = my.data)
Residuals:
Min      1Q  Median      3Q     Max
-14.972  -7.434   1.028   7.939  12.028
Coefficients:
Estimate Std. Error t value Pr(>|t|)
(Intercept)   30.104     23.824   1.264    0.242
x              3.179      1.514   2.100    0.069 .
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Residual standard error: 9.859 on 8 degrees of freedom
Multiple R-squared:  0.3553,	Adjusted R-squared:  0.2747
F-statistic: 4.409 on 1 and 8 DF,  p-value: 0.06895
> RSE*(1/n + (mean(x)^2)/(sum((x-mean(x)^2))))
[1] -0.06752474
> predict(reg, my.data)
1        2        3        4        5        6        7        8        9       10
84.15094 71.43396 68.25472 77.79245 80.97170 74.61321 80.97170 80.97170 87.33019 90.50943
> y.hat <- predict(reg, my.data)
> y
[1] 94 73 59 80 93 85 66 79 77 91
> y.hat
1        2        3        4        5        6        7        8        9       10
84.15094 71.43396 68.25472 77.79245 80.97170 74.61321 80.97170 80.97170 87.33019 90.50943
> sqrt(sum((y - y.hat)^2))
[1] 27.88436
> sqrt((sum((y - y.hat)^2))/n-2)
[1] 8.703664
> summary(reg)
Call:
lm(formula = y ~ x, data = my.data)
Residuals:
Min      1Q  Median      3Q     Max
-14.972  -7.434   1.028   7.939  12.028
Coefficients:
Estimate Std. Error t value Pr(>|t|)
(Intercept)   30.104     23.824   1.264    0.242
x              3.179      1.514   2.100    0.069 .
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Residual standard error: 9.859 on 8 degrees of freedom
Multiple R-squared:  0.3553,	Adjusted R-squared:  0.2747
F-statistic: 4.409 on 1 and 8 DF,  p-value: 0.06895
> x <- 1:5
> y <- c(2,4,5,4,5)
> lm(y~x)
Call:
lm(formula = y ~ x)
Coefficients:
(Intercept)            x
2.2          0.6
> model <- lm(y~x)
> summary(model)
Call:
lm(formula = y ~ x)
Residuals:
1    2    3    4    5
-0.8  0.6  1.0 -0.6 -0.2
Coefficients:
Estimate Std. Error t value Pr(>|t|)
(Intercept)   2.2000     0.9381   2.345    0.101
x             0.6000     0.2828   2.121    0.124
Residual standard error: 0.8944 on 3 degrees of freedom
Multiple R-squared:    0.6,	Adjusted R-squared:  0.4667
F-statistic:   4.5 on 1 and 3 DF,  p-value: 0.124
> y.hat <- predict(model)
> y.hat
1   2   3   4   5
2.8 3.4 4.0 4.6 5.2
> y
[1] 2 4 5 4 5
> y.hat
1   2   3   4   5
2.8 3.4 4.0 4.6 5.2
> y
[1] 2 4 5 4 5
> y.hat
1   2   3   4   5
2.8 3.4 4.0 4.6 5.2
> model
Call:
lm(formula = y ~ x)
Coefficients:
(Intercept)            x
2.2          0.6
> names(model)
[1] "coefficients"  "residuals"     "effects"       "rank"          "fitted.values"
[6] "assign"        "qr"            "df.residual"   "xlevels"       "call"
[11] "terms"         "model"
> model$coefficients
(Intercept)           x
2.2         0.6
> SE=sum((y.hat-y)^2)
> SE
[1] 2.4
> SE=sum(y.hat-y)^2
> SE
[1] 9.663546e-30
> n=length(x)
> n=length(x)
> SE=sqrt(sum((y.hat-y)^2)/(n-2))
> summary(model)
Call:
lm(formula = y ~ x)
Residuals:
1    2    3    4    5
-0.8  0.6  1.0 -0.6 -0.2
Coefficients:
Estimate Std. Error t value Pr(>|t|)
(Intercept)   2.2000     0.9381   2.345    0.101
x             0.6000     0.2828   2.121    0.124
Residual standard error: 0.8944 on 3 degrees of freedom
Multiple R-squared:    0.6,	Adjusted R-squared:  0.4667
F-statistic:   4.5 on 1 and 3 DF,  p-value: 0.124
> y.hat <- predict(model)
> n=length(x)
> SE=sqrt(sum((y.hat-y)^2)/(n-2))
> SE
[1] 0.8944272
> summary(model)
Call:
lm(formula = y ~ x)
Residuals:
1    2    3    4    5
-0.8  0.6  1.0 -0.6 -0.2
Coefficients:
Estimate Std. Error t value Pr(>|t|)
(Intercept)   2.2000     0.9381   2.345    0.101
x             0.6000     0.2828   2.121    0.124
Residual standard error: 0.8944 on 3 degrees of freedom
Multiple R-squared:    0.6,	Adjusted R-squared:  0.4667
F-statistic:   4.5 on 1 and 3 DF,  p-value: 0.124
> SE
[1] 0.8944272
> SE=sqrt(sum((y.hat-y)^2)/(n))
> SE
[1] 0.6928203
> SE
[1] 0.6928203
> summary(model)
Call:
lm(formula = y ~ x)
Residuals:
1    2    3    4    5
-0.8  0.6  1.0 -0.6 -0.2
Coefficients:
Estimate Std. Error t value Pr(>|t|)
(Intercept)   2.2000     0.9381   2.345    0.101
x             0.6000     0.2828   2.121    0.124
Residual standard error: 0.8944 on 3 degrees of freedom
Multiple R-squared:    0.6,	Adjusted R-squared:  0.4667
F-statistic:   4.5 on 1 and 3 DF,  p-value: 0.124
> SE=sqrt(sum((y.hat-y)^2)/(n-1))
> SE
[1] 0.7745967
> SE.alfa <- SE/((x - mean(x))^2)
> SE.alfa
[1] 0.1936492 0.7745967       Inf 0.7745967 0.1936492
> SE.alfa <- SE/((x - mean(x))^2)
> SE.alfa
[1] 0.1936492 0.7745967       Inf 0.7745967 0.1936492
> SE.alfa <- SE/sum(((x - mean(x))^2))
> SE.alfa
[1] 0.07745967
> summary(model)
Call:
lm(formula = y ~ x)
Residuals:
1    2    3    4    5
-0.8  0.6  1.0 -0.6 -0.2
Coefficients:
Estimate Std. Error t value Pr(>|t|)
(Intercept)   2.2000     0.9381   2.345    0.101
x             0.6000     0.2828   2.121    0.124
Residual standard error: 0.8944 on 3 degrees of freedom
Multiple R-squared:    0.6,	Adjusted R-squared:  0.4667
F-statistic:   4.5 on 1 and 3 DF,  p-value: 0.124
> SE.alfa
[1] 0.07745967
> sqrt(SE.alfa)
[1] 0.2783158
> n=length(x)
> SE=sqrt(sum((y.hat-y)^2)/(n-2))
> SE.alfa <- SE/sum(((x - mean(x))^2))
> sqrt(SE.alfa)
[1] 0.2990698
> n=length(x)
> SE=sqrt(sum((y.hat-y)^2)/(n-1))
> SE.alfa <- SE/sum(((x - mean(x))^2))
> sqrt(SE.alfa)
[1] 0.2783158
> n=length(x)
> SE=sqrt(sum((y.hat-y)^2)/(n))
> SE.alfa <- SE/sum(((x - mean(x))^2))
> sqrt(SE.alfa)
[1] 0.2632148
> SE.beta <- SE*(1/n + (mean(x)^2)/(sum(x-mean(x))^2))
> sqrt(SE.beta)
[1] Inf
> SE.beta <- SE*(1/n + (mean(x)^2)/(sum(x-mean(x))^2))
> SE.beta
[1] Inf
> SE
[1] 0.6928203
> n
[1] 5
> ((mean(x)^2)
+ )
[1] 9
> mean(x)
[1] 3
> SE.beta <- SE*(1/n + ((mean(x)^2)/(sum(x-mean(x))^2)))
> SE.beta
[1] Inf
> ((mean(x)^2)/(sum(x-mean(x))^2)))
Error: unexpected ')' in "((mean(x)^2)/(sum(x-mean(x))^2)))"
> ((mean(x)^2)/(sum(x-mean(x))^2))
[1] Inf
> mean(x)
[1] 3
> mean(x)sum(x-mean(x))^2)
Error: unexpected symbol in "mean(x)sum"
> mean(x)sum(x-mean(x))^2
Error: unexpected symbol in "mean(x)sum"
> sum(x-mean(x))^2)
Error: unexpected ')' in "sum(x-mean(x))^2)"
> sum(x-mean(x))^2))
Error: unexpected ')' in "sum(x-mean(x))^2)"
> sum(x-mean(x))^2)
Error: unexpected ')' in "sum(x-mean(x))^2)"
> sum(x-mean(x))^2)
Error: unexpected ')' in "sum(x-mean(x))^2)"
> sum(x-mean(x))^2)
Error: unexpected ')' in "sum(x-mean(x))^2)"
> sum(x-mean(x))
[1] 0
> x
[1] 1 2 3 4 5
> x - mean(x)
[1] -2 -1  0  1  2
> (x - mean(x))^2
[1] 4 1 0 1 4
> sum((x - mean(x))^2)
[1] 10
> SE.beta <- SE*(1/n + 9/sum((x - mean(x))^2))
> SE.beta
[1] 0.7621024
> SE.beta <- SE*(1/n + x^2/sum((x - mean(x))^2))
> SE.beta
[1] 0.2078461 0.4156922 0.7621024 1.2470766 1.8706149
> SE.beta <- SE*(1/n + mean(x)^2/sum((x - mean(x))^2))
> SE.beta
[1] 0.7621024
> sqrt(SE.beta)
[1] 0.8729847
> summary(model)
# Coefficients:
#             Estimate Std. Error t value Pr(>|t|)
# (Intercept)   2.2000     0.9381   2.345    0.101
# x             0.6000     0.2828   2.121    0.124
x <- 1:5
y <- c(2,4,5,4,5)
model <- lm(y~x)
summary(model)
y.hat <- predict(model)
n=length(x)
SE=sqrt(sum((y.hat-y)^2)/(n))
SE.alfa <- SE/sum(((x - mean(x))^2))
sqrt(SE.alfa)
SE.beta <- SE*(1/n + mean(x)^2/sum((x - mean(x))^2))
SE.beta
sqrt(SE.beta)
# Coefficients:
#             Estimate Std. Error t value Pr(>|t|)
# (Intercept)   2.2000     0.9381   2.345    0.101
# x             0.6000     0.2828   2.121    0.124
summary(model)
sqrt(SE.alfa)
sqrt(SE.beta)
x <- 1:5
y <- c(2,4,5,4,5)
model <- lm(y~x)
summary(model)
y.hat <- predict(model)
n=length(x)
SE=sqrt(sum((y.hat-y)^2)/(n-1))
SE.alfa <- SE/sum(((x - mean(x))^2))
SE.beta <- SE*(1/n + mean(x)^2/sum((x - mean(x))^2))
SE.beta
sqrt(SE.beta)
sqrt(SE.alfa)
# Coefficients:
#             Estimate Std. Error t value Pr(>|t|)
# (Intercept)   2.2000     0.9381   2.345    0.101
# x             0.6000     0.2828   2.121    0.124
x <- 1:5
y <- c(2,4,5,4,5)
model <- lm(y~x)
summary(model)
y.hat <- predict(model)
n=length(x)
SE=sqrt(sum((y.hat-y)^2)/(n-2))
SE.alfa <- SE/sum(((x - mean(x))^2))
SE.beta <- SE*(1/n + mean(x)^2/sum((x - mean(x))^2))
SE.beta
sqrt(SE.beta)
sqrt(SE.alfa)
# Coefficients:
#             Estimate Std. Error t value Pr(>|t|)
# (Intercept)   2.2000     0.9381   2.345    0.101
# x             0.6000     0.2828   2.121    0.124
x <- c(17, 13, 12, 15, 16, 14, 16, 16, 18, 19)
y <- c(94, 73, 59, 80, 93, 85, 66, 79, 77, 91)
# correlation
cor(x,y)
# linear regression
reg <- lm(y~x)
# linear regression
model <- lm(y~x)
summary(model)
# prediction
y.hat <- predict(model)
y
y.hat
n=length(x)
SE=sqrt(sum((y.hat-y)^2)/(n-1))
SE.alfa <- SE/sum(((x - mean(x))^2))
SE.beta <- SE*(1/n + mean(x)^2/sum((x - mean(x))^2))
SE.beta
x <- c(17, 13, 12, 15, 16, 14, 16, 16, 18, 19)
y <- c(94, 73, 59, 80, 93, 85, 66, 79, 77, 91)
# correlation
cor(x,y)
# linear regression
model <- lm(y~x)
summary(model)
# prediction
y.hat <- predict(model)
n=length(x)
SE=sqrt(sum((y.hat-y)^2)/(n-1))
SE.alfa <- SE/sum(((x - mean(x))^2))
SE.beta <- SE*(1/n + mean(x)^2/sum((x - mean(x))^2))
SE.beta
sqrt(SE.beta)
sqrt(SE.alfa)
n=length(x)
SE=sqrt(sum((y.hat-y)^2)/(n))
SE.alfa <- SE/sum(((x - mean(x))^2))
SE.beta <- SE*(1/n + mean(x)^2/sum((x - mean(x))^2))
SE.beta
sqrt(SE.beta)
sqrt(SE.alfa)
sqrt(SE.beta)
sqrt(SE.alfa)
RSS <- sum((y.hat-y)^2)
RSS
RSE <- sqrt(RSS/(n-2))
SE.alfa <- RSE/sum(((x - mean(x))^2))
sqrt(SE.alfa)
SE.alfa
summary(model)
SE.alfa
sqrt(SE.alfa)
x
y
sqrt(SE.alfa)
SE.alfa
SE.beta
SE.beta <- RSE*(1/n + mean(x)^2/sum((x - mean(x))^2))
SE.beta
sqrt(SE.beta)
sqrt(SE.alfa)
SE.beta
SE.alfa
n
weight=c(58, 70, 74, 63.5, 62.0, 70.5, 71.0, 66.0)
plasma <- c(2.75, 2.86, 3.37, 2.76, 2.62, 3.49, 3.05, 3.12) # plasma volume (liters)
cor(weight, plasma)
n=length(weight)
cor(weight, plasma)
# linear regression
x <- weight
y <- plasma
model <- lm(y~x)
summary(model)
mean(x)
mean(y)
model$coefficients
model$coefficients$x
model$coefficients
model$coefficients$x
model$coefficients[,1]
model$coefficients[1]
model$coefficients[2]
model$coefficients[2]*((x-mean(x))*^2)
model$coefficients[2]*sum((x-mean(x))*^2)
model$coefficients[2]*sum((x-mean(x))^2)
(sum((y-mean(y))^2) - model$coefficients[2]*sum((x-mean(x))^2))/(n-2)
(sum((y-mean(y))^2) - (model$coefficients[2])^2*sum((x-mean(x))^2))/(n-2)
s <- sqrt((sum((y-mean(y))^2) - (model$coefficients[2])^2*sum((x-mean(x))^2))/(n-2))
s
se.1 <- s/(sqrt(sum(x-mean(x))^2))
se.1
se.1 <- s/(sqrt(sum(x-mean(x)^2)))
se.1 <-sqrt(sum(x-mean(x))^2))
se.1 <-sqrt(sum(x-mean(x))^2)
se.1
sum(x-mean(x))^2)
sum(x-mean(x))^2
sum((x-mean(x))^2)
se.1 <-sqrt(sum((x-mean(x))^2))
se.1
se.1 <-s/sqrt(sum((x-mean(x))^2))
se.1
se.0 <- s*(1/n + mean(x)^2/(sum(x-mean(x))^2))
se.0
se.0 <- s*(1/n + mean(x)^2/(sum((x-mean(x))^2)))
se.0
se.0
se.0 <- s*sqrt((1/n + mean(x)^2/(sum((x-mean(x))^2))))
se.0
?lm
plot(weight, plasma, xlab = "weight [kg]", ylab="plasma [l]")
plot(weight, plasma, pch=19, xlab = "body weight [kg]", ylab="plasma [l]")
plot(weight, plasma, pch=19, xlab = "body weight [kg]", ylab="plasma volume [l]")
plot(weight, plasma, pch=19, las=1, xlab = "body weight [kg]", ylab="plasma volume [l]")
abline(lm(plasma~weight), col="red") # regression line (y~x)
.10 * 1700
.20 * 1700
.15 * 1700
255 / 2
255 / 2 - 30 - 24
255 / 2 - 30 - 24 - 16
