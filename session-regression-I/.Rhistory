1    2    3    4    5
-0.8  0.6  1.0 -0.6 -0.2
Coefficients:
Estimate Std. Error t value Pr(>|t|)
(Intercept)   2.2000     0.9381   2.345    0.101
x             0.6000     0.2828   2.121    0.124
Residual standard error: 0.8944 on 3 degrees of freedom
Multiple R-squared:    0.6,	Adjusted R-squared:  0.4667
F-statistic:   4.5 on 1 and 3 DF,  p-value: 0.124
> SE
[1] 0.8944272
> SE=sqrt(sum((y.hat-y)^2)/(n))
> SE
[1] 0.6928203
> SE
[1] 0.6928203
> summary(model)
Call:
lm(formula = y ~ x)
Residuals:
1    2    3    4    5
-0.8  0.6  1.0 -0.6 -0.2
Coefficients:
Estimate Std. Error t value Pr(>|t|)
(Intercept)   2.2000     0.9381   2.345    0.101
x             0.6000     0.2828   2.121    0.124
Residual standard error: 0.8944 on 3 degrees of freedom
Multiple R-squared:    0.6,	Adjusted R-squared:  0.4667
F-statistic:   4.5 on 1 and 3 DF,  p-value: 0.124
> SE=sqrt(sum((y.hat-y)^2)/(n-1))
> SE
[1] 0.7745967
> SE.alfa <- SE/((x - mean(x))^2)
> SE.alfa
[1] 0.1936492 0.7745967       Inf 0.7745967 0.1936492
> SE.alfa <- SE/((x - mean(x))^2)
> SE.alfa
[1] 0.1936492 0.7745967       Inf 0.7745967 0.1936492
> SE.alfa <- SE/sum(((x - mean(x))^2))
> SE.alfa
[1] 0.07745967
> summary(model)
Call:
lm(formula = y ~ x)
Residuals:
1    2    3    4    5
-0.8  0.6  1.0 -0.6 -0.2
Coefficients:
Estimate Std. Error t value Pr(>|t|)
(Intercept)   2.2000     0.9381   2.345    0.101
x             0.6000     0.2828   2.121    0.124
Residual standard error: 0.8944 on 3 degrees of freedom
Multiple R-squared:    0.6,	Adjusted R-squared:  0.4667
F-statistic:   4.5 on 1 and 3 DF,  p-value: 0.124
> SE.alfa
[1] 0.07745967
> sqrt(SE.alfa)
[1] 0.2783158
> n=length(x)
> SE=sqrt(sum((y.hat-y)^2)/(n-2))
> SE.alfa <- SE/sum(((x - mean(x))^2))
> sqrt(SE.alfa)
[1] 0.2990698
> n=length(x)
> SE=sqrt(sum((y.hat-y)^2)/(n-1))
> SE.alfa <- SE/sum(((x - mean(x))^2))
> sqrt(SE.alfa)
[1] 0.2783158
> n=length(x)
> SE=sqrt(sum((y.hat-y)^2)/(n))
> SE.alfa <- SE/sum(((x - mean(x))^2))
> sqrt(SE.alfa)
[1] 0.2632148
> SE.beta <- SE*(1/n + (mean(x)^2)/(sum(x-mean(x))^2))
> sqrt(SE.beta)
[1] Inf
> SE.beta <- SE*(1/n + (mean(x)^2)/(sum(x-mean(x))^2))
> SE.beta
[1] Inf
> SE
[1] 0.6928203
> n
[1] 5
> ((mean(x)^2)
+ )
[1] 9
> mean(x)
[1] 3
> SE.beta <- SE*(1/n + ((mean(x)^2)/(sum(x-mean(x))^2)))
> SE.beta
[1] Inf
> ((mean(x)^2)/(sum(x-mean(x))^2)))
Error: unexpected ')' in "((mean(x)^2)/(sum(x-mean(x))^2)))"
> ((mean(x)^2)/(sum(x-mean(x))^2))
[1] Inf
> mean(x)
[1] 3
> mean(x)sum(x-mean(x))^2)
Error: unexpected symbol in "mean(x)sum"
> mean(x)sum(x-mean(x))^2
Error: unexpected symbol in "mean(x)sum"
> sum(x-mean(x))^2)
Error: unexpected ')' in "sum(x-mean(x))^2)"
> sum(x-mean(x))^2))
Error: unexpected ')' in "sum(x-mean(x))^2)"
> sum(x-mean(x))^2)
Error: unexpected ')' in "sum(x-mean(x))^2)"
> sum(x-mean(x))^2)
Error: unexpected ')' in "sum(x-mean(x))^2)"
> sum(x-mean(x))^2)
Error: unexpected ')' in "sum(x-mean(x))^2)"
> sum(x-mean(x))
[1] 0
> x
[1] 1 2 3 4 5
> x - mean(x)
[1] -2 -1  0  1  2
> (x - mean(x))^2
[1] 4 1 0 1 4
> sum((x - mean(x))^2)
[1] 10
> SE.beta <- SE*(1/n + 9/sum((x - mean(x))^2))
> SE.beta
[1] 0.7621024
> SE.beta <- SE*(1/n + x^2/sum((x - mean(x))^2))
> SE.beta
[1] 0.2078461 0.4156922 0.7621024 1.2470766 1.8706149
> SE.beta <- SE*(1/n + mean(x)^2/sum((x - mean(x))^2))
> SE.beta
[1] 0.7621024
> sqrt(SE.beta)
[1] 0.8729847
> summary(model)
# Coefficients:
#             Estimate Std. Error t value Pr(>|t|)
# (Intercept)   2.2000     0.9381   2.345    0.101
# x             0.6000     0.2828   2.121    0.124
x <- 1:5
y <- c(2,4,5,4,5)
model <- lm(y~x)
summary(model)
y.hat <- predict(model)
n=length(x)
SE=sqrt(sum((y.hat-y)^2)/(n))
SE.alfa <- SE/sum(((x - mean(x))^2))
sqrt(SE.alfa)
SE.beta <- SE*(1/n + mean(x)^2/sum((x - mean(x))^2))
SE.beta
sqrt(SE.beta)
# Coefficients:
#             Estimate Std. Error t value Pr(>|t|)
# (Intercept)   2.2000     0.9381   2.345    0.101
# x             0.6000     0.2828   2.121    0.124
summary(model)
sqrt(SE.alfa)
sqrt(SE.beta)
x <- 1:5
y <- c(2,4,5,4,5)
model <- lm(y~x)
summary(model)
y.hat <- predict(model)
n=length(x)
SE=sqrt(sum((y.hat-y)^2)/(n-1))
SE.alfa <- SE/sum(((x - mean(x))^2))
SE.beta <- SE*(1/n + mean(x)^2/sum((x - mean(x))^2))
SE.beta
sqrt(SE.beta)
sqrt(SE.alfa)
# Coefficients:
#             Estimate Std. Error t value Pr(>|t|)
# (Intercept)   2.2000     0.9381   2.345    0.101
# x             0.6000     0.2828   2.121    0.124
x <- 1:5
y <- c(2,4,5,4,5)
model <- lm(y~x)
summary(model)
y.hat <- predict(model)
n=length(x)
SE=sqrt(sum((y.hat-y)^2)/(n-2))
SE.alfa <- SE/sum(((x - mean(x))^2))
SE.beta <- SE*(1/n + mean(x)^2/sum((x - mean(x))^2))
SE.beta
sqrt(SE.beta)
sqrt(SE.alfa)
# Coefficients:
#             Estimate Std. Error t value Pr(>|t|)
# (Intercept)   2.2000     0.9381   2.345    0.101
# x             0.6000     0.2828   2.121    0.124
x <- c(17, 13, 12, 15, 16, 14, 16, 16, 18, 19)
y <- c(94, 73, 59, 80, 93, 85, 66, 79, 77, 91)
# correlation
cor(x,y)
# linear regression
reg <- lm(y~x)
# linear regression
model <- lm(y~x)
summary(model)
# prediction
y.hat <- predict(model)
y
y.hat
n=length(x)
SE=sqrt(sum((y.hat-y)^2)/(n-1))
SE.alfa <- SE/sum(((x - mean(x))^2))
SE.beta <- SE*(1/n + mean(x)^2/sum((x - mean(x))^2))
SE.beta
x <- c(17, 13, 12, 15, 16, 14, 16, 16, 18, 19)
y <- c(94, 73, 59, 80, 93, 85, 66, 79, 77, 91)
# correlation
cor(x,y)
# linear regression
model <- lm(y~x)
summary(model)
# prediction
y.hat <- predict(model)
n=length(x)
SE=sqrt(sum((y.hat-y)^2)/(n-1))
SE.alfa <- SE/sum(((x - mean(x))^2))
SE.beta <- SE*(1/n + mean(x)^2/sum((x - mean(x))^2))
SE.beta
sqrt(SE.beta)
sqrt(SE.alfa)
n=length(x)
SE=sqrt(sum((y.hat-y)^2)/(n))
SE.alfa <- SE/sum(((x - mean(x))^2))
SE.beta <- SE*(1/n + mean(x)^2/sum((x - mean(x))^2))
SE.beta
sqrt(SE.beta)
sqrt(SE.alfa)
sqrt(SE.beta)
sqrt(SE.alfa)
RSS <- sum((y.hat-y)^2)
RSS
RSE <- sqrt(RSS/(n-2))
SE.alfa <- RSE/sum(((x - mean(x))^2))
sqrt(SE.alfa)
SE.alfa
summary(model)
SE.alfa
sqrt(SE.alfa)
x
y
sqrt(SE.alfa)
SE.alfa
SE.beta
SE.beta <- RSE*(1/n + mean(x)^2/sum((x - mean(x))^2))
SE.beta
sqrt(SE.beta)
sqrt(SE.alfa)
SE.beta
SE.alfa
n
weight=c(58, 70, 74, 63.5, 62.0, 70.5, 71.0, 66.0)
plasma <- c(2.75, 2.86, 3.37, 2.76, 2.62, 3.49, 3.05, 3.12) # plasma volume (liters)
cor(weight, plasma)
n=length(weight)
cor(weight, plasma)
# linear regression
x <- weight
y <- plasma
model <- lm(y~x)
summary(model)
mean(x)
mean(y)
model$coefficients
model$coefficients$x
model$coefficients
model$coefficients$x
model$coefficients[,1]
model$coefficients[1]
model$coefficients[2]
model$coefficients[2]*((x-mean(x))*^2)
model$coefficients[2]*sum((x-mean(x))*^2)
model$coefficients[2]*sum((x-mean(x))^2)
(sum((y-mean(y))^2) - model$coefficients[2]*sum((x-mean(x))^2))/(n-2)
(sum((y-mean(y))^2) - (model$coefficients[2])^2*sum((x-mean(x))^2))/(n-2)
s <- sqrt((sum((y-mean(y))^2) - (model$coefficients[2])^2*sum((x-mean(x))^2))/(n-2))
s
se.1 <- s/(sqrt(sum(x-mean(x))^2))
se.1
se.1 <- s/(sqrt(sum(x-mean(x)^2)))
se.1 <-sqrt(sum(x-mean(x))^2))
se.1 <-sqrt(sum(x-mean(x))^2)
se.1
sum(x-mean(x))^2)
sum(x-mean(x))^2
sum((x-mean(x))^2)
se.1 <-sqrt(sum((x-mean(x))^2))
se.1
se.1 <-s/sqrt(sum((x-mean(x))^2))
se.1
se.0 <- s*(1/n + mean(x)^2/(sum(x-mean(x))^2))
se.0
se.0 <- s*(1/n + mean(x)^2/(sum((x-mean(x))^2)))
se.0
se.0
se.0 <- s*sqrt((1/n + mean(x)^2/(sum((x-mean(x))^2))))
se.0
?lm
plot(weight, plasma, xlab = "weight [kg]", ylab="plasma [l]")
plot(weight, plasma, pch=19, xlab = "body weight [kg]", ylab="plasma [l]")
plot(weight, plasma, pch=19, xlab = "body weight [kg]", ylab="plasma volume [l]")
plot(weight, plasma, pch=19, las=1, xlab = "body weight [kg]", ylab="plasma volume [l]")
abline(lm(plasma~weight), col="red") # regression line (y~x)
.10 * 1700
.20 * 1700
.15 * 1700
255 / 2
255 / 2 - 30 - 24
255 / 2 - 30 - 24 - 16
setwd("~/Desktop/workshop-biostatistics/session-regression-I")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.path="session-regression-I-files/figures/")
knitr::opts_chunk$set(fig.pos = 'H')
knitr::opts_chunk$set(cache.path = "tmp")
knitr::opts_chunk$set(cache = TRUE)
# Chunk 2
par(mfrow=c(2,2), mar=c(3,4,3,3))
# Deterministic relationship example
x_celcius <- seq(from=0, to=50, by=5)
y_fahr <- 9/5*x_celcius+32
plot(x_celcius, y_fahr, type="b", pch=19, xlab="Celcius", ylab="Fahrenheit", main="a)", cex.main=0.8)
# Statistical relationship (increasing)
x <- seq(from=0, to=100, by=5)
y_increasing <- 2*x + rnorm(length(x), mean=100, sd=25)
plot(x, y_increasing, pch=19, xlab="x", ylab="y", main="b)", cex.main=0.8)
# Statistical relationship (decreasing)
y_decreasing <- -2*x + rnorm(length(x), mean=100, sd=25)
plot(x, y_decreasing, pch=19, xlab="x", ylab="y", main="c)", cex.main=0.8)
# Statistical relationshp (random)
y_random <- - rnorm(length(x), mean=100, sd=25)
plot(x, y_random, pch=19, xlab="x", ylab="y", main="d)", cex.main=0.8)
# Chunk 3
weight <- c(58, 70, 74, 63.5, 62.0, 70.5, 71.0, 66.0) # body weight (kg)
plasma <- c(2.75, 2.86, 3.37, 2.76, 2.62, 3.49, 3.05, 3.12) # plasma volume (liters)
# Chunk 4
plot(weight, plasma, pch=19, las=1, xlab = "body weight [kg]", ylab="plasma volume [l]")
#abline(lm(plasma~weight), col="red") # regression line
# Chunk 5
plot(weight, plasma, pch=19, las=1, xlab = "body weight [kg]", ylab="plasma volume [l]")
abline(lm(plasma~weight), col="red") # regression line
# Chunk 6
par(mfcol=c(2,2), mar=c(4,4,3,2))
# Values from regression model: plasma_volume = 0.0857 + 0.043615*x
# Fitted line
plot(weight, plasma, pch=19, las=1, xlab = "body weight [kg]", ylab="plasma volume [l]",  panel.first = grid())
abline(lm(plasma~weight), col="red") # regression line
text(65, 3.3, "plasma = 0.0857 + 0.0436 * weight", cex=1)
# Beta 1 example b
plot(weight, plasma, pch=19, las=1, xlab = "body weight [kg]", ylab="plasma volume [l]",  panel.first = grid(), xlim=c(60, 70), ylim=c(2.8, 3.2))
abline(lm(plasma~weight), col="red") # regression line
segments(x0=65, y0=2.92, x1=66, y1=2.92, col="blue")
segments(x0=66, y0=2.92, x1=66, y1=2.964, col="blue")
text(67, 2.92, expression(beta[1]), cex=1.2, col="blue")
# Beta 1 example a
plot(weight, plasma, pch=19, las=1, xlab = "body weight [kg]", ylab="plasma volume [l]",  panel.first = grid())
abline(lm(plasma~weight), col="red") # regression line
segments(x0=65, y0=2.92, x1=70, y1=2.92, col="blue")
segments(x0=70, y0=2.92, x1=70, y1=3.14, col="blue")
text(72, 2.95, expression(beta[1]), cex=1.2, col="blue")
# Beta 0 example a
plot(weight, plasma, pch=19, las=1, xlab = "body weight [kg]", ylab="plasma volume [l]",  panel.first = grid(), xlim=c(-5, 80), ylim=c(0, 5))
abline(lm(plasma~weight), col="red") # regression line
abline(h=0.0857) # regression line
segments(x0=65, y0=2.92, x1=66, y1=2.92, col="blue")
segments(x0=66, y0=2.92, x1=66, y1=2.964, col="blue")
text(0, 0.5, expression(beta[0]), cex=1.2, col="blue")
# Chunk 7
data.reg <- data.frame(plasma=plasma, weight=weight)
fit.reg <- lm(plasma~weight, data=data.reg)
data.reg$predicted <- predict(fit.reg)
data.reg$residuals <- residuals((fit.reg))
library(ggplot2)
ggplot(data.reg, aes(x=data.reg$weight, data.reg$plasma)) + geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "lightgrey") +
geom_segment(aes(xend = weight, yend = predicted)) +
geom_point(aes(y = predicted), shape = 1) +
geom_point(aes(y = predicted), shape = 1) +
theme_bw() + xlab("body weight [kg]") + ylab("plasma volume [liters]")
# Chunk 8
weight <- c(58, 70, 74, 63.5, 62.0, 70.5, 71.0, 66.0) # body weight (kg)
plasma <- c(2.75, 2.86, 3.37, 2.76, 2.62, 3.49, 3.05, 3.12) # plasma volume (liters)
# Chunk 9
# Data
weight <- c(58, 70, 74, 63.5, 62.0, 70.5, 71.0, 66.0)
plasma <- c(2.75, 2.86, 3.37, 2.76, 2.62, 3.49, 3.05, 3.12)
# Plot
plot(weight, plasma)
# Regression
reg <- lm(plasma~weight)
summary(reg)
# Coefficients
coef(reg)
# Confidence intervals
confint(reg)
# Add regression line to the plot
abline(reg)
# Chunk 10
# Prediction
predict(reg, data.frame(weight=60))
predict(reg, data.frame(weight=c(60, 70)))
# Prediction with confidence intervals
predict(reg, data.frame(weight=66), interval="prediction")
# Chunk 11
weight <- c(58, 70, 74, 63.5, 62.0, 70.5, 71.0, 66.0) # body weight (kg)
plasma <- c(2.75, 2.86, 3.37, 2.76, 2.62, 3.49, 3.05, 3.12) # plasma volume (liters)
data.reg <- data.frame(plasma=plasma, weight=weight)
fit.reg <- lm(plasma~weight, data=data.reg)
data.reg$predicted <- predict(fit.reg)
data.reg$residuals <- residuals((fit.reg))
library(ggplot2)
ggplot(data.reg, aes(x=data.reg$weight, data.reg$plasma)) + geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "lightgrey") +
geom_segment(aes(xend = weight, yend = predicted)) +
geom_point(aes(y = predicted), shape = 1) +
geom_point(aes(y = predicted), shape = 1) +
theme_bw() + xlab("body weight [kg]") + ylab("plasma volume [liters]")
# Chunk 12
#weight <- c(58, 70, 74, 63.5, 62.0, 70.5, 71.0, 66.0) # body weight (kg)
#plasma <- c(2.75, 2.86, 3.37, 2.76, 2.62, 3.49, 3.05, 3.12) # plasma volume (liters)
plasma
weight
head(data.reg)
reg <- lm(data.reg$plasma~data.reg$weight)
# predict Y given the values of X and regression model reg
y.pred <- predict(reg, data.frame(weight=data.reg$weight))
y.pred
# calculate residuals
e.terms <- data.reg$plasma-y.pred
e.terms
# calculate RSS
RSS=sum(e.terms^2)
# calculate RSE
n=nrow(data.reg)
RSE <- sqrt((1/(n-2))*RSS)
# R reg objects contains it all
names(reg)
reg$fitted.values
reg$residuals
# RSE
summary(reg)
#summary(reg)
names(reg)
r2 <- cor(data.reg$plasma, data.reg$weight)^2
#summary(reg)
names(reg)
r2 <- cor(data.reg$plasma, data.reg$weight)^2
reg
plot(reg$fitted.values)
graphics.off()
plot(reg$fitted.values)
plot(reg, which=1:2)
par(mfrow=c)
plot(reg, which=1:2)
par(mfrow=c(2,2))
plot(reg, which=1:2)
par(mfrow=c(2,1))
plot(reg, which=1:2)
plot(reg, which=1:4)
par(mfrow=c(2,2))
plot(reg, which=1:4)
par(mfrow=c(2,1))
plot(reg, which=1:2)
par(mfrow=c(1,2))
plot(reg, which=1:2)
hist(reg$residuals)
par(mfrow=c(2,2), mar=c(3,4,3,3))
# Deterministic relationship example
x_celcius <- seq(from=0, to=50, by=5)
y_fahr <- 9/5*x_celcius+32
plot(x_celcius, y_fahr, type="b", pch=19, xlab="Celcius", ylab="Fahrenheit", main="a)", cex.main=0.8)
# Statistical relationship (increasing)
x <- seq(from=0, to=100, by=5)
y_increasing <- 2*x + rnorm(length(x), mean=100, sd=25)
plot(x, y_increasing, pch=19, xlab="x", ylab="y", main="b)", cex.main=0.8)
# Statistical relationship (decreasing)
y_decreasing <- -2*x + rnorm(length(x), mean=100, sd=25)
plot(x, y_decreasing, pch=19, xlab="x", ylab="y", main="c)", cex.main=0.8)
# Statistical relationship (random)
y_random <- - rnorm(length(x), mean=100, sd=25)
plot(x, y_random, pch=19, xlab="x", ylab="y", main="d)", cex.main=0.8)
plot(weight, plasma, pch=19, las=1, xlab = "body weight [kg]", ylab="plasma volume [l]")
abline(lm(plasma~weight), col="red") # regression line
plot(weight, plasma, pch=19, las=1, xlab = "body weight [kg]", ylab="plasma volume [l]",  panel.first = grid())
plot(weight, plasma, pch=19, las=1, xlab = "body weight [kg]", ylab="plasma volume [l]", panel.first = grid())
abline(lm(plasma~weight), col="red") # regression line
par(mfcol=c(2,2), mar=c(4,4,3,2))
# Values from regression model: plasma_volume = 0.0857 + 0.043615*x
# Fitted line
plot(weight, plasma, pch=19, las=1, xlab = "body weight [kg]", ylab="plasma volume [l]",  panel.first = grid())
abline(lm(plasma~weight), col="red") # regression line
text(65, 3.3, "plasma = 0.0857 + 0.0436 * weight", cex=1)
# Beta 1 example b
plot(weight, plasma, pch=19, las=1, xlab = "body weight [kg]", ylab="plasma volume [l]",  panel.first = grid(), xlim=c(60, 70), ylim=c(2.8, 3.2))
abline(lm(plasma~weight), col="red") # regression line
segments(x0=65, y0=2.92, x1=66, y1=2.92, col="blue")
segments(x0=66, y0=2.92, x1=66, y1=2.964, col="blue")
text(67, 2.92, expression(beta[1]), cex=1.2, col="blue")
# Beta 1 example a
plot(weight, plasma, pch=19, las=1, xlab = "body weight [kg]", ylab="plasma volume [l]",  panel.first = grid())
abline(lm(plasma~weight), col="red") # regression line
segments(x0=65, y0=2.92, x1=70, y1=2.92, col="blue")
segments(x0=70, y0=2.92, x1=70, y1=3.14, col="blue")
text(72, 2.95, expression(beta[1]), cex=1.2, col="blue")
# Beta 0 example a
plot(weight, plasma, pch=19, las=1, xlab = "body weight [kg]", ylab="plasma volume [l]",  panel.first = grid(), xlim=c(-5, 80), ylim=c(0, 5))
abline(lm(plasma~weight), col="red") # regression line
abline(h=0.0857) # regression line
segments(x0=65, y0=2.92, x1=66, y1=2.92, col="blue")
segments(x0=66, y0=2.92, x1=66, y1=2.964, col="blue")
text(0, 0.5, expression(beta[0]), cex=1.2, col="blue")
